spring.application.name=gateway-service
server.port=8084

spring.cloud.compatibility-verifier.enabled=false

spring.main.web-application-type=reactive
spring.main.allow-bean-definition-overriding=true

# Keycloak OIDC Configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/property-realm
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/realms/property-realm/protocol/openid-connect/certs

# If you need to authenticate users (not just validate tokens)
keycloak.client-id=property-app
keycloak.client-secret=YOUR_CLIENT_SECRET
keycloak.auth-server-url=http://localhost:8080
keycloak.realm=property-realm


# Gateway Route for doctor-service
spring.cloud.gateway.routes[0].id=calendar-conflict-optimizer-service
spring.cloud.gateway.routes[0].uri=http://localhost:8081/
spring.cloud.gateway.routes[0].predicates[0]=Path=/calendar-service-api/**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

# Gateway Route for user-property-booking-service
spring.cloud.gateway.routes[1].id=user-property-booking-service
spring.cloud.gateway.routes[1].uri=http://localhost:8082/
spring.cloud.gateway.routes[1].predicates[0]=Path=/user-service-api/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1

# Gateway Route for kafka-consumer-service
spring.cloud.gateway.routes[2].id=kafka-consumer-service
spring.cloud.gateway.routes[2].uri=http://localhost:8083/
spring.cloud.gateway.routes[2].predicates[0]=Path=/kafka-consumer-service-api/**
spring.cloud.gateway.routes[2].filters[0]=StripPrefix=1